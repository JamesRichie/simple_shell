#include "shell.h"

/**
 * tokenize_input - splits a string into an array of tokens
 * @input: Input by user
 * @args: arguments
 */

void tokenize_input(char *input, char **args) {
    char *tok = strtok(input, " \t\n");
    int i = 0;
    
    while (tok != NULL) {
        args[i] = tok;
        tok = strtok(NULL, " \t\n");
        i++;
    }
    args[i] = NULL;
}

int main() {
    char input[MAX_INPUT_SIZE];
    char *args[MAX_ARGUMENTS];
    
    while (1) {
        printx("SimpleShell > ");
        fflush(stdout);
        
        if (fgets(input, sizeof(input), stdin) == NULL) {
            break;
        }
        
        input[strcspn(input, "\n")] = '\0';
        
        if (strcmp(input, "exit") == 0) {
            printx("Exiting the shell.\n");
            break;
        }
        
        pid_t pit = fork();
        
        if (pit < 0) {
            perror("Fork failed");
            exit(1);
        } else if (pit == 0) {
            tokenize_input(input, args);
            if (execvp(args[0], args) == -1) {
                perror("Command not found");
                exit(1);
            }
        } else {
            int status;
            waitpid(pit, &status, 0);
        }
    }
    
    return 0;
}
